# %% [markdown]
# # Exploring Dandiset 001359: Human Patch-seq Data
#
# This notebook explores Dandiset 001359, which contains Patch-seq data from human subjects.
#
# **Disclaimer:** This notebook was generated by an AI and has not been fully verified. Users should exercise caution when interpreting the code or results.

# %% [markdown]
# ## Dandiset Overview
#
# This Dandiset contains Patch-seq recordings (intracellular electrophysiology) from human cells.
#
# You can find more information about this Dandiset on the DANDI archive: https://dandiarchive.org/dandiset/001359/0.250401.1603

# %% [markdown]
# ## Required Packages
#
# This notebook requires the following packages:
#
# * dandi (for accessing the DANDI archive)
# * pynwb (for working with NWB files)
# * h5py (for reading HDF5 files)
# * remfile (for accessing remote files)
# * matplotlib (for plotting)
# * numpy (for numerical operations)
# * itertools (for iterating through assets)

# %% [markdown]
# ## Loading the Dandiset
#
# We can use the DANDI API to connect to the archive and retrieve information about the Dandiset.

# %%
from itertools import islice
from dandi.dandiapi import DandiAPIClient
import pynwb
import h5py
import remfile
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Connect to DANDI archive
client = DandiAPIClient()
dandiset = client.get_dandiset("001359", "0.250401.1603")

# Print basic information about the Dandiset
metadata = dandiset.get_raw_metadata()
print(f"Dandiset name: {metadata['name']}")
print(f"Dandiset URL: {metadata['url']}")

# List some assets in the Dandiset
assets = dandiset.get_assets()
print("\nFirst 5 assets:")
for asset in islice(assets, 5):
    print(f"- {asset.path} (ID: {asset.identifier})")

# %% [markdown]
# ## Loading an NWB file
#
# Dandiset 001359 contains several NWB files. We will load one of them to explore its contents.
# We will load the file `sub-1203384279/sub-1203384279_ses-1207262032_icephys.nwb`.
# The URL for this asset is: https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/

# %%
# Load the NWB file
url = "https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/"
remote_file = remfile.File(url)
h5_file = h5py.File(remote_file)
io = pynwb.NWBHDF5IO(file=h5_file)
nwb = io.read()

# Print some metadata from the NWB file
print(f"Session Description: {nwb.session_description}")
print(f"Identifier: {nwb.identifier}")
print(f"Session Start Time: {nwb.session_start_time}")

# %% [markdown]
# ## NWB File Contents
#
# This NWB file contains intracellular electrophysiology data. Key sections include:
#
# *   `acquisition`: Recorded electrophysiological data (VoltageClampSeries and CurrentClampSeries).
# *   `stimulus`: Applied electrical stimulation (VoltageClampStimulusSeries and CurrentClampStimulusSeries).
# *   `icephys_electrodes`: Information about the recording electrodes.
# *   `intervals`: Time intervals for experimental epochs.
# *   `sweep_table`: Table linking series to sweeps.

# %% [markdown]
# ## Exploring Acquisition and Stimulus Data
#
# We can access the recorded voltage/current and the applied stimulus data from the `acquisition` and `stimulus` sections of the NWB file.

# %%
# List available acquisition series
print("Available acquisition series:")
for key in nwb.acquisition.keys():
    print(f"- {key} ({type(nwb.acquisition[key]).__name__})")

# List available stimulus series
print("\nAvailable stimulus series:")
for key in nwb.stimulus.keys():
    print(f"- {key} ({type(nwb.stimulus[key]).__name__})")


# %% [markdown]
# ## Visualizing a Current Clamp Recording and Stimulus
#
# Let's visualize one of the Current Clamp recordings and its corresponding stimulus. We'll use `data_00005_AD0` from `acquisition` and `data_00005_DA0` from `stimulus`.

# %%
# Get data and stimulus
acquisition_series_cc = nwb.acquisition['data_00005_AD0']
stimulus_series_cc = nwb.stimulus['data_00005_DA0']

# Get stimulus description
print(f"Stimulus description for Current Clamp series: {acquisition_series_cc.stimulus_description}")

# Convert time to seconds relative to the start of the series
# Note: We are only loading a subset of the data for illustration
num_samples = acquisition_series_cc.data.shape[0] # or choose a smaller subset
sampling_rate = acquisition_series_cc.starting_time + np.arange(num_samples) / acquisition_series_cc.rate

# Load a subset of the data into memory
time_cc = sampling_rate
data_cc = acquisition_series_cc.data[:] # Consider slicing for large datasets
stimulus_cc = stimulus_series_cc.data[:] # Consider slicing for large datasets

# Plot
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(time_cc, data_cc)
plt.ylabel(f'Voltage ({acquisition_series_cc.unit})')
plt.title('Current Clamp Recording')

plt.subplot(2, 1, 2)
plt.plot(time_cc, stimulus_cc)
plt.ylabel(f'Current ({stimulus_series_cc.unit})')
plt.xlabel('Time (s)')
plt.title('Current Clamp Stimulus')

plt.tight_layout()
plt.show()

# %% [markdown]
# ## Visualizing a Voltage Clamp Recording and Stimulus
#
# Now let's visualize a Voltage Clamp recording and its corresponding stimulus. We'll use `data_00000_AD0` from `acquisition` and `data_00000_DA0` from `stimulus`.

# %%
# Get data and stimulus
acquisition_series_vc = nwb.acquisition['data_00000_AD0']
stimulus_series_vc = nwb.stimulus['data_00000_DA0']

# Get stimulus description
print(f"Stimulus description for Voltage Clamp series: {acquisition_series_vc.stimulus_description}")

# Convert time to seconds relative to the start of the series
# Note: We are only loading a subset of the data for illustration
num_samples_vc = acquisition_series_vc.data.shape[0] # or choose a smaller subset
sampling_rate_vc = acquisition_series_vc.starting_time + np.arange(num_samples_vc) / acquisition_series_vc.rate

# Load a subset of the data into memory
time_vc = sampling_rate_vc
data_vc = acquisition_series_vc.data[:] # Consider slicing for large datasets
stimulus_vc = stimulus_series_vc.data[:] # Consider slicing for large datasets

# Plot
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(time_vc, data_vc)
plt.ylabel(f'Current ({acquisition_series_vc.unit})')
plt.title('Voltage Clamp Recording')

plt.subplot(2, 1, 2)
plt.plot(time_vc, stimulus_vc)
plt.ylabel(f'Voltage ({stimulus_series_vc.unit})')
plt.xlabel('Time (s)')
plt.title('Voltage Clamp Stimulus')

plt.tight_layout()
plt.show()

# %% [markdown]
# ## Exploring Epochs
#
# The `epochs` interval table contains information about the experimental epochs. We can convert this to a pandas DataFrame for easier viewing.

# %%
# Convert epochs to DataFrame
epochs_df = nwb.epochs.to_dataframe()

# Display the first few rows
print("Epochs table:")
print(epochs_df.head())

# %% [markdown]
# ## Exploring Sweep Table
#
# The `sweep_table` links different PatchClampSeries together by sweep number. We can also convert this to a pandas DataFrame.

# %%
# Convert sweep table to DataFrame
sweep_table_df = nwb.sweep_table.to_dataframe()

# Display the first few rows
print("\nSweep table:")
print(sweep_table_df.head())


# %% [markdown]
# ## Summary and Future Directions
#
# This notebook demonstrated how to access and visualize intracellular electrophysiology data from a human Patch-seq Dandiset. We showed how to load the Dandiset and an NWB file, explore its contents, and visualize examples of current clamp and voltage clamp recordings and stimuli.
#
# Potential future directions for analysis include:
#
# *   Analyzing and comparing different sweeps within the same series.
# *   Extracting and analyzing electrophysiological features (e.g., resting membrane potential, input resistance, action potential properties).
# *   Relating the electrophysiological properties to available transcriptomic or morphological data in the Dandiset (if applicable).
# *   Exploring data from other NWB files in the Dandiset.

# %%
# Close the NWB file
io.close()