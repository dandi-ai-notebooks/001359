# %% [markdown]
# # Exploring Dandiset 001359: Human Patch-seq Data

# %% [markdown]
# **Note:** This notebook was generated by an AI and has not been fully verified. Please exercise caution when interpreting the code or results and consider consulting the original data and documentation for definitive conclusions.

# %% [markdown]
# ## What is Patch-seq?
#
# Patch-seq is a multimodal technique that combines electrophysiological recording from a single neuron (patch-clamp), followed by aspiration of the cell's intracellular contents for subsequent genetic sequencing (RNA sequencing), and sometimes anatomical reconstruction. This allows researchers to correlate a neuron's electrical properties, genetic profile, and morphology. This Dandiset contains the electrophysiological data from human neurons.

# %% [markdown]
# This notebook explores Dandiset 001359, which contains Patch-seq data from human neurons.
#
# Dandiset 001359: [https://dandiarchive.org/dandiset/001359/0.250401.1603](https://dandiarchive.org/dandiset/001359/0.250401.1603)
#
# The notebook will demonstrate how to:
# - Load the Dandiset using the DANDI Python client.
# - Access and examine an NWB file within the Dandiset.
# - Visualize examples of intracellular electrophysiology recordings (Current Clamp and Voltage Clamp series) from the NWB file.

# %% [markdown]
# ### Required Packages
#
# This notebook requires the following Python packages:
# - dandi
# - pynwb
# - h5py
# - remfile
# - numpy
# - matplotlib

# %% [markdown]
# ### Loading the Dandiset

# %%
from itertools import islice
from dandi.dandiapi import DandiAPIClient

# Connect to DANDI archive
client = DandiAPIClient()
dandiset = client.get_dandiset("001359", "0.250401.1603")

# Print basic information about the Dandiset
metadata = dandiset.get_raw_metadata()
print(f"Dandiset name: {metadata['name']}")
print(f"Dandiset URL: {metadata['url']}")

# List some assets in the Dandiset
assets = dandiset.get_assets()
print("\nFirst 5 assets:")
for asset in islice(assets, 5):
    print(f"- {asset.path} (ID: {asset.identifier})")

# %% [markdown]
# ### Exploring an NWB File

# %% [markdown]
# Dandiset 001359 contains several NWB files, each representing intracellular electrophysiology recordings from a human neuron. We will now load and explore one of these files: `sub-1203384279/sub-1203384279_ses-1207262032_icephys.nwb`.

# %%
import pynwb
import h5py
import remfile
import matplotlib.pyplot as plt
import numpy as np

# Load the NWB file
# The URL for the selected asset is: https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/
url = "https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/"
remote_file = remfile.File(url)
h5_file = h5py.File(remote_file)
io = pynwb.NWBHDF5IO(file=h5_file)
nwb = io.read()

# Print some metadata from the NWB file
print(f"Session ID: {nwb.session_id}")
print(f"Subject ID: {nwb.subject.subject_id}")
print(f"Species: {nwb.subject.species}")
print(f"Sex: {nwb.subject.sex}")
print(f"Age: {nwb.subject.age}")

# %% [markdown]
# #### NWB File Contents Overview
#
# This NWB file contains intracellular electrophysiology data, including both voltage and current clamp recordings. Let's inspect the main containers:

# %%
# List the keys in the acquisition and stimulus sections
print("Acquisition keys:", list(nwb.acquisition.keys()))
print("Stimulus keys:", list(nwb.stimulus.keys()))

# %% [markdown]
# As seen above, the `/acquisition` section contains the recorded electrophysiology data series, and the `/stimulus` section contains the applied stimulus waveforms. The keys follow a pattern `data_[sweep_number]_[electrode_id]`.
#
# The file also contains:
#
# *   `/icephys_electrodes`: Information about the intracellular electrode(s).
# *   `/intervals/epochs`: Time intervals corresponding to different experimental epochs or sweeps.
# *   `/sweep_table`: Table organizing the data by sweep number.

# %% [markdown]
# The sweep table provides a mapping of sweeps to the corresponding data and stimulus series. Let's display the first few rows of the sweep table:

# %%
# Display the first few rows of the sweep table
print(nwb.sweep_table.to_dataframe().head())

# %% [markdown]
# #### Explore this NWB file on Neurosift

# %% [markdown]
# You can explore this NWB file directly in your browser using Neurosift:
#
# [https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/&dandisetId=001359&dandisetVersion=draft](https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/&dandisetId=001359&dandisetVersion=draft)

# %% [markdown]
# ### Visualizing Electrophysiology Data

# %% [markdown]
# We will now visualize data from some of the acquisition series to illustrate the typical recordings in this Dandiset.

# %% [markdown]
# #### Current Clamp Recording Example

# %%
# Access CurrentClampSeries data
# We will use data_00004_AD0
data_series_cc = nwb.acquisition["data_00004_AD0"]

# Get a subset of the data and times for plotting
num_points_to_plot = 10000
data_subset_cc = data_series_cc.data[0:num_points_to_plot]
starting_time_cc = data_series_cc.starting_time
rate_cc = data_series_cc.rate
time_cc = starting_time_cc + np.arange(num_points_to_plot) / rate_cc

# Plot the data
plt.figure(figsize=(10, 6))
plt.plot(time_cc, data_subset_cc)
plt.xlabel("Time (s)")
plt.ylabel(f"Voltage ({data_series_cc.unit})")
plt.title(f"Subset of {data_series_cc.name} (Current Clamp Series)")
plt.grid(True)
plt.show()

# %% [markdown]
# This plot shows a segment of a Current Clamp recording, where the membrane voltage of the neuron is recorded while a current is injected. We can observe a rapid voltage deflection likely corresponding to a stimulus artifact or a neuronal response.

# %% [markdown]
# #### Voltage Clamp Recording Example

# %%
# Access VoltageClampSeries data
# We will use data_00000_AD0
data_series_vc = nwb.acquisition["data_00000_AD0"]

# Get a subset of the data and times for plotting
num_points_to_plot = 10000
data_subset_vc = data_series_vc.data[0:num_points_to_plot]
starting_time_vc = data_series_vc.starting_time
rate_vc = data_series_vc.rate
time_vc = starting_time_vc + np.arange(num_points_to_plot) / rate_vc

# Plot the data
plt.figure(figsize=(10, 6))
plt.plot(time_vc, data_subset_vc)
plt.xlabel("Time (s)")
plt.ylabel(f"Current ({data_series_vc.unit})")
plt.title(f"Subset of {data_series_vc.name} (Voltage Clamp Series)")
plt.grid(True)
plt.show()

# %% [markdown]
# This plot shows a segment of a Voltage Clamp recording, where the membrane voltage is held constant and the resulting current is measured. We can observe a sharp, large negative current transient shortly after the recording starts, likely representing a fast inward current.

# %% [markdown]
# #### Stimulus and Response Example

# %% [markdown]
# To understand the experimental protocol, it is often useful to visualize the applied stimulus alongside the recorded response. Let's plot the stimulus and response for the Current Clamp series `data_00004_AD0`.

# %%
# Access CurrentClampStimulusSeries data
stimulus_series_cc = nwb.stimulus["data_00004_DA0"]

# Get a subset of the stimulus data and times for plotting
num_points_to_plot_stim = 10000
stimulus_subset_cc = stimulus_series_cc.data[0:num_points_to_plot_stim]
starting_time_stim_cc = stimulus_series_cc.starting_time
rate_stim_cc = stimulus_series_cc.rate
time_stim_cc = starting_time_stim_cc + np.arange(num_points_to_plot_stim) / rate_stim_cc

# Assume the starting times and rates are the same or aligned for this example
# In a real analysis, you might need to align them precisely

# Plot stimulus and response
fig, ax1 = plt.subplots(figsize=(10, 6))

color = 'tab:red'
ax1.set_xlabel('Time (s)')
ax1.set_ylabel(f"Voltage ({data_series_cc.unit})", color=color)
ax1.plot(time_cc, data_subset_cc, color=color)
ax1.tick_params(axis='y', labelcolor=color)
ax1.grid(True)

ax2 = ax1.twinx()
color = 'tab:blue'
ax2.set_ylabel(f"Current ({stimulus_series_cc.unit})", color=color)
ax2.plot(time_stim_cc, stimulus_subset_cc, color=color)
ax2.tick_params(axis='y', labelcolor=color)

plt.title(f"Stimulus and Response for {data_series_cc.name}")
plt.show()

# %% [markdown]
# ### Summary and Future Directions

# %% [markdown]
# This notebook provided a basic introduction to accessing and visualizing intracellular electrophysiology data from Dandiset 001359. We demonstrated how to load the Dandiset and an NWB file, examine its structure, and plot examples of Current Clamp and Voltage Clamp recordings, as well as an example of stimulus and response together.
#
# Possible future directions for analysis include:
# - Analyzing the `epochs` and `sweep_table` to organize and process data by experimental sweep.
# - Implementing more advanced analysis techniques for intracellular electrophysiology data, such as calculating input resistance, membrane time constant, or analyzing action potential properties (though full spike sorting is beyond the scope of a simple notebook).
# - Examining other NWB files in the Dandiset to compare recordings from different neurons or experimental conditions.
# - Further exploring the stimulus waveforms and their exact timing relative to the recorded responses.

# %%
# Close the NWB file
io.close()