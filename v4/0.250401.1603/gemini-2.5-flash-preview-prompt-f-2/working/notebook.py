# %% [markdown]
# # Exploring Dandiset 001359: Human Patch-seq Data
# %% [markdown]
# **Disclaimer:** This notebook was automatically generated by an AI assistant and has not been fully verified. Users should exercise caution when interpreting the code or results and should independently verify any critical findings.
# %% [markdown]
# ## Dandiset Overview
#
# This notebook explores Dandiset 001359, titled "20250331_AIBS_Patchseq_human", which contains Patch-seq data from human cells. This multimodal dataset includes electrophysiology recordings using both current clamp and voltage clamp techniques.
#
# You can find the Dandiset here: https://dandiarchive.org/dandiset/001359/0.250401.1603
# %% [markdown]
# ## Notebook Contents
#
# This notebook demonstrates how to:
#
# 1. Load the Dandiset and list its assets using the DANDI API.
# 2. Load a specific NWB file from the Dandiset.
# 3. Examine the structure and metadata of the NWB file.
# 4. Visualize example electrophysiology data (current clamp and voltage clamp) from the NWB file.
# 5. Access other relevant data and metadata within the NWB file, such as sweep tables and detected spikes.
# %% [markdown]
# ## Required Packages
#
# This notebook requires the following Python packages:
#
# * dandi
# * pynwb
# * h5py
# * remfile
# * numpy
# * matplotlib
# * pandas
# %% [markdown]
# ## Loading the Dandiset and Assets
#
# We will use the `dandi` Python client to connect to the DANDI archive and access the specified Dandiset.

# %%
from itertools import islice
from dandi.dandiapi import DandiAPIClient

# Connect to DANDI archive
client = DandiAPIClient()
dandiset = client.get_dandiset("001359", "0.250401.1603")

# Print basic information about the Dandiset
metadata = dandiset.get_raw_metadata()
print(f"Dandiset name: {metadata['name']}")
print(f"Dandiset URL: {metadata['url']}")

# List some assets in the Dandiset
assets = dandiset.get_assets()
print("\nFirst 5 assets:")
for asset in islice(assets, 5):
    print(f"- {asset.path} (ID: {asset.identifier})")

# %% [markdown]
# ## Loading an NWB file
#
# The Dandiset contains multiple NWB files. We will load one specific file for demonstration: `sub-1203384279/sub-1203384279_ses-1207262032_icephys.nwb`.
#
# We can construct the download URL for this asset using its Asset ID.

# %%
import pynwb
import h5py
import remfile

# Define the NWB file URL
nwb_url = "https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/"

# Load the NWB file
# This uses remfile to access the remote file without downloading the entire file
remote_file = remfile.File(nwb_url)
h5_file = h5py.File(remote_file)
io = pynwb.NWBHDF5IO(file=h5_file)
nwb = io.read()

print("NWB file loaded successfully.")

# %% [markdown]
# ## Exploring NWB File Contents
#
# The loaded NWB object (`nwb`) provides access to the data and metadata within the file. We can explore its structure to understand the available information.
#
# Some key sections include:
#
# * `nwb.acquisition`: Contains acquired data, such as electrophysiology recordings.
# * `nwb.stimulus`: Contains stimulus data.
# * `nwb.icephys_electrodes`: Information about the intracellular electrodes used.
# * `nwb.devices`: Information about the recording device.
# * `nwb.intervals['epochs']`: Time intervals representing experimental epochs.
# * `nwb.sweep_table`: Table summarizing sweeps in the recording.
# * `nwb.processing['spikes']`: Contains data related to detected spikes.
#
# Let's print some basic metadata from the NWB file.

# %%
print(f"Session ID: {nwb.session_id}")
print(f"Subject ID: {nwb.subject.subject_id}")
print(f"Subject sex: {nwb.subject.sex}")
print(f"Subject age: {nwb.subject.age}")
print(f"Session start time: {nwb.session_start_time}")
print(f"Experiment description: {nwb.data_collection}")

# %% [markdown]
# We can also list the available data series in the `acquisition` and `stimulus` sections.

# %%
print("\nAcquisition data series:")
for key in nwb.acquisition.keys():
    print(f"- {key} ({type(nwb.acquisition[key]).__name__})")

print("\nStimulus data series:")
for key in nwb.stimulus.keys():
    print(f"- {key} ({type(nwb.stimulus[key]).__name__})")

# %% [markdown]
# You can further explore the structure of the NWB file using tools like Neurosift. Below is a link to view this specific NWB file on Neurosift:
#
# https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/c269347a-2d4b-4b6a-8b7c-2ef303ff503d/download/&dandisetId=001359&dandisetVersion=draft
# %% [markdown]
# ## Visualizing Electrophysiology Data
#
# Let's visualize a subset of the electrophysiology data to see the recorded signals. We will plot an example Current Clamp recording and an example Voltage Clamp recording.
# %% [markdown]
# ### Example 1: Current Clamp Recording ($\texttt{data\_00004\_AD0}$) and Stimulus ($\texttt{data\_00004\_DA0}$)
#
# This example shows a current clamp recording where current is injected into the cell and the resulting voltage response is measured.

# %%
import matplotlib.pyplot as plt
import numpy as np

# Get the Current Clamp recording and stimulus series
voltage_series = nwb.acquisition["data_00004_AD0"]
stimulus_series = nwb.stimulus["data_00004_DA0"]

# Extract a subset of data and timestamps for plotting
# We are using the first 10000 data points as a subset for demonstration.
num_points = 10000
voltage_data_subset = voltage_series.data[0:num_points]
stimulus_data_subset = stimulus_series.data[0:num_points]

# Calculate timestamps for the subset based on starting time and rate
# Assuming a constant sampling rate for the subset
if voltage_series.rate:
    timestamps_subset = voltage_series.starting_time + np.arange(num_points) / voltage_series.rate
elif voltage_series.timestamps:
    # If rate is not available, attempt to use timestamps if they exist and are not empty
    if voltage_series.timestamps.shape[0] >= num_points:
         timestamps_subset = voltage_series.timestamps[0:num_points]
    else:
        timestamps_subset = voltage_series.timestamps[:] # Use all if less than num_points
else:
    timestamps_subset = np.arange(num_points) # Fallback to indices if no time info


# Plot the data and stimulus
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(timestamps_subset, voltage_data_subset)
plt.ylabel(f"Voltage ({voltage_series.unit})")
plt.title("Current Clamp Recording (Subset)")
plt.grid(True)

plt.subplot(2, 1, 2)
plt.plot(timestamps_subset, stimulus_data_subset)
plt.ylabel(f"Current ({stimulus_series.unit})")
plt.xlabel(f"Time ({voltage_series.starting_time_unit})")
plt.title("Stimulus Current (Subset)")
plt.grid(True)

plt.tight_layout()
plt.show()

# %% [markdown]
# In this current clamp recording subset, we observe a clear hyperpolarizing response in the voltage trace following the brief negative current injection.
# %% [markdown]
# ### Example 2: Voltage Clamp Recording ($\texttt{data\_00000\_AD0}$) and Stimulus ($\texttt{data\_00000\_DA0}$)
#
# This example shows a voltage clamp recording where the voltage across the cell membrane is held constant and the resulting current is measured.

# %%
# Get the Voltage Clamp recording and stimulus series
current_series = nwb.acquisition["data_00000_AD0"]
stimulus_series = nwb.stimulus["data_00000_DA0"]

# Extract a subset of data and timestamps for plotting
# We are using the first 10000 data points as a subset for demonstration.
num_points = 10000
current_data_subset = current_series.data[0:num_points]
stimulus_data_subset = stimulus_series.data[0:num_points]

# Calculate timestamps for the subset based on starting time and rate
# Assuming a constant sampling rate for the subset
if current_series.rate:
    timestamps_subset = current_series.starting_time + np.arange(num_points) / current_series.rate
elif current_series.timestamps:
    # If rate is not available, attempt to use timestamps if they exist and are not empty
    if current_series.timestamps.shape[0] >= num_points:
         timestamps_subset = current_series.timestamps[0:num_points]
    else:
        timestamps_subset = current_series.timestamps[:] # Use all if less than num_points
else:
    timestamps_subset = np.arange(num_points) # Fallback to indices if no time info


# Plot the data and stimulus
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(timestamps_subset, current_data_subset)
plt.ylabel(f"Current ({current_series.unit})")
plt.title("Voltage Clamp Recording (Subset)")
plt.grid(True)

plt.subplot(2, 1, 2)
plt.plot(timestamps_subset, stimulus_data_subset)
plt.ylabel(f"Voltage ({stimulus_series.unit})")
plt.xlabel(f"Time ({current_series.starting_time_unit})")
plt.title("Stimulus Voltage (Subset)")
plt.grid(True)

plt.tight_layout()
plt.show()

# %% [markdown]
# In this voltage clamp recording subset, we see a clear inward current response coinciding with the step increase in the stimulus voltage.
# %% [markdown]
# ## Accessing Other Data and Metadata
#
# The NWB file contains other valuable information, such as the sweep table and detected spikes.
# %% [markdown]
# ### Sweep Table
#
# The `sweep_table` provides information about the different sweeps within the recording.

# %%
import pandas as pd

# Access the sweep table
sweep_table = nwb.sweep_table

# Convert to pandas DataFrame for easier viewing
try:
    sweep_df = sweep_table.to_dataframe()
    print("\nSweep Table (first 5 rows):")
    print(sweep_df.head())
except Exception as e:
    print(f"Could not convert sweep_table to DataFrame: {e}")
    print("Sweep Table columns:", sweep_table.colnames)

# %% [markdown]
# ### Detected Spikes
#
# The `processing['spikes']` section may contain information about detected spikes.

# %%
if 'spikes' in nwb.processing:
    spikes_module = nwb.processing['spikes']
    print("\nDetected Spikes Module:")
    print(f"Description: {spikes_module.description}")

    if spikes_module.data_interfaces:
        print("\nDetected Spike TimeSeries:")
        for key in spikes_module.data_interfaces.keys():
            timeseries = spikes_module.data_interfaces[key]
            print(f"- {key}: shape={timeseries.data.shape}, unit={timeseries.unit}, timestamps_shape={timeseries.timestamps.shape}")
            # You can access spike times with timeseries.timestamps[:]
    else:
        print("\nNo spike TimeSeries found in the spikes processing module.")
else:
    print("\n'spikes' processing module not found in this NWB file.")

# %% [markdown]
# ## Summary and Future Directions
#
# This notebook demonstrated how to load and perform basic exploration of a human Patch-seq NWB file from Dandiset 001359. We visualized examples of current clamp and voltage clamp recordings and briefly looked at the sweep table and detected spikes (if any).
#
# Future directions for analysis could include:
#
# * Analyzing the full electrophysiology sweeps to characterize neuronal properties (e.g., input resistance, firing patterns).
# * Correlating electrophysiology data with other modalities (e.g., gene expression or morphology) if available in other parts of the Dandiset.
# * Performing more advanced analyses, such as spike shape analysis or detailed passive and active property extraction.
#
# Remember to refer to the Dandiset's documentation and
# metadata for more detailed information about the data and experimental procedures.
#
# %%
# Close the NWB file
io.close()
print("\nNWB file closed.")